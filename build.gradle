plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'com.netflix.dgs.codegen' version '6.2.1'
}

group = 'com.dwortptr'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '21'
}

repositories {
	mavenCentral()
}

ext {
	set('netflixDgsVersion', "9.0.0")
}

dependencies {
	// https://mvnrepository.com/artifact/org.projectlombok/lombok
	compileOnly 'org.projectlombok:lombok:1.18.26'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	//implementation 'com.netflix.graphql.dgs:graphql-dgs-spring-graphql-starter'
	implementation 'jakarta.platform:jakarta.jakartaee-api:10.0.0'
	// https://mvnrepository.com/artifact/jakarta.websocket/jakarta.websocket-client-api
	implementation 'jakarta.websocket:jakarta.websocket-client-api:2.2.0'
	implementation 'org.xerial:sqlite-jdbc:3.30.1'
	// https://mvnrepository.com/artifact/com.expediagroup/graphql-kotlin-federated-hooks-provider
	//implementation 'com.github.gwenn:sqlite-dialect:0.1.4'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//note don't use snapshot in production
	//I'm just trying to find a dialect that will work with sqlite for demo purposes
	implementation 'org.hibernate.orm:hibernate-community-dialects:6.5.2.Final'
	testImplementation 'org.springframework:spring-webflux'
	testImplementation 'org.springframework.graphql:spring-graphql-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

dependencyManagement {
	imports {
		mavenBom "com.netflix.graphql.dgs:graphql-dgs-platform-dependencies:${netflixDgsVersion}"
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

generateJava {
	schemaPaths = ["${projectDir}/src/main/resources/graphql-client"]
	packageName = 'com.dwortptr.musicgraphqldemo.codegen'
	generateClient = true
}

